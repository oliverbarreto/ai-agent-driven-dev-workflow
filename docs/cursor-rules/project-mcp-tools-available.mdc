---
description: "Provides the list MCP Servers available and the list of tools with their capabilities"
globs: *
alwaysApply: true
---

# MCP Servers
You have access to the following servers:

### Sequential Thinking

- Use **`Sequential Thinking MCP`** to facilitate dynamic and reflective problem-solving through a structured, step-by-step thinking process.
- The Sequential Thinking tool is designed to break down complex problems into manageable steps, allowing users to revise and refine their thoughts as their understanding deepens. It enables branching into alternative paths of reasoning, dynamically adjusting the total number of thoughts, and generating and verifying solution hypotheses. This tool is ideal for scenarios where the problem's scope isn't initially clear, tasks need maintained context over multiple steps, and irrelevant information needs filtering.
- Key Features: 
  - Enables branching into alternative paths of reasoning
  - Breaks down complex problems into manageable steps
  - Allows revision and refinement of thoughts
  - Generates and verifies solution hypotheses
  - Dynamically adjusts the total number of thoughts

- Use Cases: 
  - Analysis that might need course correction
  - Breaking down complex problems into steps
  - Planning and design with room for revision

### Context7
- Use **`Context7 MCP`** for accessing the most up-to-date version-specific documentation and code examples straight from the source. It also provides code examples on how to use different technologies and tools.
- To use "Context7 MCP Server", just add `use context7` to the prompt in Cursor, for example:
```
- Create a basic Next.js project with app router. use context7
- Create a script to delete the rows where the city is "" given PostgreSQL credentials. use context7
```
- `Context7` provides the following Available Tools:
1. `resolve-library-id`: Resolves a general library name into a Context7-compatible library ID.
  - `libraryName` (required)
2. `get-library-docs`: Fetches documentation for a library using a Context7-compatible library ID.
  - `context7CompatibleLibraryID` (required)
  - `topic` (optional): Focus the docs on a specific topic (e.g., "routing", "hooks")
  - `tokens` (optional, default 5000): Max number of tokens to return. Values less than 5000 are automatically increased to 5000.

### Playwright MCP
- Use **`Playwright MCP`** for using powerfull browser automation capabilities using Playwright. This MCP enables interacting with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.

- The tools are available in two modes:
  - Snapshot Mode (default): Uses accessibility snapshots for better performance and reliability

### Supabase
- Use **`Supabase MCP`** to work with Supabase. There are over 20 tools available in the Supabase MCP server. 
- For a full list of abilities, see Tools in the project README.
  - https://github.com/supabase-community/supabase-mcp#tools

The following Supabase tools are available to the LLM:

#### Project Management

_**Note:** these tools will be unavailable if the server is @scoped to a project._

- `list_projects`: Lists all Supabase projects for the user.
- `get_project`: Gets details for a project.
- `create_project`: Creates a new Supabase project.
- `pause_project`: Pauses a project.
- `restore_project`: Restores a project.
- `list_organizations`: Lists all organizations that the user is a member of.
- `get_organization`: Gets details for an organization.

#### Database Operations

- `list_tables`: Lists all tables within the specified schemas.
- `list_extensions`: Lists all extensions in the database.
- `list_migrations`: Lists all migrations in the database.
- `apply_migration`: Applies a SQL migration to the database. SQL passed to this tool will be tracked within the database, so LLMs should use this for DDL operations (schema changes).
- `execute_sql`: Executes raw SQL in the database. LLMs should use this for regular queries that don't change the schema.
- `get_logs`: Gets logs for a Supabase project by service type (api, postgres, edge functions, auth, storage, realtime). LLMs can use this to help with debugging and monitoring service performance.

#### Edge Function Management

- `list_edge_functions`: Lists all Edge Functions in a Supabase project.
- `deploy_edge_function`: Deploys a new Edge Function to a Supabase project. LLMs can use this to deploy new functions or update existing ones.

#### Project Configuration

- `get_project_url`: Gets the API URL for a project.
- `get_anon_key`: Gets the anonymous API key for a project.

#### Branching (Experimental, requires a paid plan)

- `create_branch`: Creates a development branch with migrations from production branch.
- `list_branches`: Lists all development branches.
- `delete_branch`: Deletes a development branch.
- `merge_branch`: Merges migrations and edge functions from a development branch to production.
- `reset_branch`: Resets migrations of a development branch to a prior version.
- `rebase_branch`: Rebases development branch on production to handle migration drift.

#### Development Tools

- `generate_typescript_types`: Generates TypeScript types based on the database schema. LLMs can save this to a file and use it in their code.

#### Cost Confirmation

- `get_cost`: Gets the cost of a new project or branch for an organization.
- `confirm_cost`: Confirms the user's understanding of new project or branch costs. This is required to create a new project or branch.

### Brave Search MCP Server

- Use **`Brave Search MCP`** to search using the Brave Search API, providing both web and local search capabilities.
- It provides the following featuers:
  - Web Search: General queries, news, articles, with pagination and freshness controls
  - Local Search: Find businesses, restaurants, and services with detailed information
  - Flexible Filtering: Control result types, safety levels, and content freshness
  - Smart Fallbacks: Local search automatically falls back to web when no results are found
- The following `Brave Search MCP` tools are available to the LLM:


#### `brave_web_search`

- Execute web searches with pagination and filtering
- Inputs:
  - `query` (string): Search terms
  - `count` (number, optional): Results per page (max 20)
  - `offset` (number, optional): Pagination offset (max 9)

#### `brave_local_search`

- Search for local businesses and services
- Inputs:
  - `query` (string): Local search terms
  - `count` (number, optional): Number of results (max 20)
- Automatically falls back to web search if no local results found

